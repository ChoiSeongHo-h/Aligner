"""
Django settings for AlignerViewer project.

Generated by 'django-admin startproject' using Django 3.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-r+e+v!ad88(v-16nn$fk7rjh$o6bs0^@1mf$k!c(*x2t_kq6de'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'AlignerViewer.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'AlignerViewer.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'ko-kr'

TIME_ZONE = 'Asia/Seoul'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'





#-------------------------------------------------- global
import cv2
import numpy as np
import sysv_ipc as ipc
from PIL import Image
import base64
from io import BytesIO
from enum import Enum

class AlignerConsts(Enum):
    CAM_H = 720
    CAM_W = 1280
    INTER_STATUS_SHARER_ID = 2334
    SCENE0_DATA_SHARER_ID = 2333
    SCENE1_DATA_SHARER_ID = 2343
    OBJECT0_DATA_SHARER_ID = 2344
    OBJECT1_DATA_SHARER_ID = 2345
    OBJECT_X0_Q_SHARER_ID = 2335
    OBJECT_X0_R_SHARER_ID = 2336
    OBJECT_Y0_Q_SHARER_ID = 2337
    OBJECT_Y0_R_SHARER_ID = 2338
    OBJECT_X1_Q_SHARER_ID = 2339
    OBJECT_X1_R_SHARER_ID = 2340
    OBJECT_Y1_Q_SHARER_ID = 2341
    OBJECT_Y1_R_SHARER_ID = 2342
    CPP_STANDBY = 0
    GRABBING_SCENE0 = 1
    GRABBING_SCENE1 = 2
    INSPECTION = 3
    SETTING_SCENE0_ROI = 4
    SETTING_SCENE1_ROI = 5
    CPP_WORK_DONE = 6

ZOOM = 1

class MemorySharer:
    def __init__(self, projectId):
        self.__path = "/tmp"
        self._key = ipc.ftok(self.__path, projectId)
        self._shm = ipc.SharedMemory(self._key, 0, 0)
        self._shm.attach(0,0)

    def __del__(self):
        self._shm.detach()

class ImageMemorySharer(MemorySharer):
    __URI = 0

    def __init__(self, projectId, h, w):
        MemorySharer.__init__(self, projectId)
        self.__h = int(h)
        self.__w = int(w)

    def SetURI(self, h = 0, w = 0):
        imgH = h
        imgW = w
        if(imgH*imgW <= 0):
            imgH = self.__h
            imgW = self.__w

        self.__buf = self._shm.read(imgH*imgW)
        npImage = np.frombuffer(self.__buf, dtype=np.uint8).reshape(imgH, imgW)
        pilImg = Image.fromarray(npImage, 'L')
        data = BytesIO()
        pilImg.save(data, "JPEG")
        data64 = base64.b64encode(data.getvalue())
        self.__URI = u'data:img/jpeg;base64,'+data64.decode('utf-8')
        return self.__URI

    def ReadURI(self):
        return self.__URI

class ByteMemorySharer(MemorySharer):
    def ReadByte(self):
        self.__buf = self._shm.read(1)
        return int.from_bytes(self.__buf,  byteorder='big')

    def WriteByte(self, x):
        self._shm.write(bytes([x]))


SCENE_H = int(AlignerConsts.CAM_H.value*ZOOM)
SCENE_W = int(AlignerConsts.CAM_W.value*ZOOM)

SCENE0 = ImageMemorySharer(AlignerConsts.SCENE0_DATA_SHARER_ID.value, SCENE_H, SCENE_W)
SCENE1 = ImageMemorySharer(AlignerConsts.SCENE1_DATA_SHARER_ID.value, SCENE_H, SCENE_W)
OBJECT0 = ImageMemorySharer(AlignerConsts.OBJECT0_DATA_SHARER_ID.value, SCENE_H, SCENE_W)
OBJECT1 = ImageMemorySharer(AlignerConsts.OBJECT1_DATA_SHARER_ID.value, SCENE_H, SCENE_W)

INTER_STATUS = ByteMemorySharer(AlignerConsts.INTER_STATUS_SHARER_ID.value)
OBJECT_X0_Q = ByteMemorySharer(AlignerConsts.OBJECT_X0_Q_SHARER_ID.value)
OBJECT_X0_R = ByteMemorySharer(AlignerConsts.OBJECT_X0_R_SHARER_ID.value)
OBJECT_Y0_Q = ByteMemorySharer(AlignerConsts.OBJECT_Y0_Q_SHARER_ID.value)
OBJECT_Y0_R = ByteMemorySharer(AlignerConsts.OBJECT_Y0_R_SHARER_ID.value)
OBJECT_X1_Q = ByteMemorySharer(AlignerConsts.OBJECT_X1_Q_SHARER_ID.value)
OBJECT_X1_R = ByteMemorySharer(AlignerConsts.OBJECT_X1_R_SHARER_ID.value)
OBJECT_Y1_Q = ByteMemorySharer(AlignerConsts.OBJECT_Y1_Q_SHARER_ID.value)
OBJECT_Y1_R = ByteMemorySharer(AlignerConsts.OBJECT_Y1_R_SHARER_ID.value)

IS_ACCESSED = False

